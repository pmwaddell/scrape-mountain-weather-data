-- NOTE: jobs may have to end with COMMIT; as well!!

-- Set primary keys for scraped_forecasts_final
ALTER TABLE forecast_data.scraped_forecasts_final
ADD PRIMARY KEY (mtn_name, elevation, local_time_issued, local_time_of_forecast);


-- UPSERT staging table into final table:
WITH consolidated_staging AS (
	SELECT DISTINCT ON (
		mtn_name,
		elevation,
		local_time_issued,
		local_time_of_forecast
	)
	*
	FROM forecast_data.scraped_forecasts_staging
	ORDER BY mtn_name, elevation, local_time_issued, local_time_of_forecast,
		time_of_scrape DESC
);

INSERT INTO forecast_data.scraped_forecasts_final
	SELECT * FROM consolidated_staging
ON CONFLICT
	(mtn_name, elevation, local_time_issued, local_time_of_forecast)
DO UPDATE SET
	time_of_scrape = EXCLUDED.time_of_scrape,
	forecast_phrase = EXCLUDED.forecast_phrase,
	wind_speed = EXCLUDED.wind_speed,
	snow = EXCLUDED.snow,
	rain = EXCLUDED.rain,
	max_temp = EXCLUDED.max_temp,
	chill = EXCLUDED.chill,
	freezing_level = EXCLUDED.freezing_level,
	cloud_base = EXCLUDED.cloud_base;


-- Get time diff and delete older data
SELECT
	time_of_scrape,
	EXTRACT(DAY FROM NOW() - time_of_scrape) AS diff
FROM
	forecast_data.test_scraped_forecasts_staging;

DELETE FROM forecast_data.test_scraped_forecasts_staging
WHERE EXTRACT(DAY FROM NOW() - time_of_scrape) > 3;


-- Check upsert, Nanga Parbat seems to always give 252 rows per update
SELECT
	COUNT(*),
	local_time_issued
FROM
	forecast_data.scraped_forecasts_final
WHERE
	mtn_name = 'nanga_parbat'
GROUP BY
	local_time_issued
ORDER BY
	local_time_issued DESC;


-- Check that old staging data is dropped
SELECT
	EXTRACT(DAY FROM NOW() - time_of_scrape),
	COUNT(*)
FROM forecast_data.scraped_forecasts_staging
GROUP BY EXTRACT(DAY FROM NOW() - time_of_scrape);



-- Set primary keys for sun_final
ALTER TABLE sun_data.sun_final
ADD PRIMARY KEY (mtn_name, scrape_date);


-- Upsert sun data from sun_staging to sun_final
WITH consolidated_staging AS (
	SELECT DISTINCT ON (
		mtn_name,
		scrape_date
	)
	*
	FROM sun_data.sun_staging
	ORDER BY mtn_name, scrape_date DESC
)

INSERT INTO sun_data.sun_final
	SELECT * FROM consolidated_staging
ON CONFLICT
	(mtn_name, scrape_date)
DO NOTHING;


-- Upsert which adds total_daylight column also includes:
ALTER TABLE sun_data.sun_final
ADD COLUMN IF NOT EXISTS total_daylight interval;

UPDATE sun_data.sun_final
SET total_daylight = sunset_time - sunrise_time;